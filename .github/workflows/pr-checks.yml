name: PR Checks

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check code formatting
      run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,scss,json,md}"
      
    - name: Run ESLint
      run: npx eslint src/ --ext .js,.jsx,.ts,.tsx --format=github
      
    - name: Type check
      run: npx tsc --noEmit --skipLibCheck
      if: hashFiles('tsconfig.json') != ''
      
    - name: Check for unused dependencies
      run: npx depcheck --ignores="@types/*,eslint-*,prettier,@testing-library/*"
      
    - name: Bundle size analysis
      uses: preactjs/compressed-size-action@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        pattern: "./build/static/js/*.js"
        exclude: "{**/*.map,**/node_modules/**}"
        
  accessibility:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run accessibility tests
      run: |
        npx serve -s build -p 3000 &
        sleep 10
        npx pa11y http://localhost:3000 --reporter cli --threshold 10
        
  visual-regression:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright
      run: npx playwright install chromium
      
    - name: Build application
      run: npm run build
      
    - name: Start application
      run: npx serve -s build -p 3000 &
      
    - name: Wait for server
      run: sleep 10
      
    - name: Run visual regression tests
      run: |
        npx playwright test --config=playwright.config.js
      if: hashFiles('playwright.config.js') != ''
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-results
        path: test-results/
        
  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        
  pr-labeler:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Label PR based on changes
      uses: actions/labeler@v5
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/labeler.yml
        
  comment-pr:
    runs-on: ubuntu-latest
    needs: [code-quality, accessibility]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.payload.pull_request.head.sha,
          });
          
          const failedChecks = checks.check_runs.filter(check => check.conclusion === 'failure');
          
          if (failedChecks.length === 0) {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ All checks passed! This PR is ready for review.'
            });
          } else {
            const failedChecksList = failedChecks.map(check => `- ❌ ${check.name}`).join('\n');
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ Some checks failed:\n\n${failedChecksList}\n\nPlease fix these issues before requesting a review.`
            });
          }
